{"version":3,"sources":["component/header.jsx","component/login.jsx","component/signup.jsx","component/table.jsx","component/pnf.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","React","Component","Login","id","type","name","placeholder","Signup","Tbl","Pnf","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAsBeA,G,uLAjBP,OACI,yBAAKC,UAAU,UACd,6BACG,4BAEA,4BAAI,uBAAGC,KAAK,KAAR,UAChB,4BAAI,uBAAGA,KAAK,KAAR,WACQ,4BAAI,uBAAGA,KAAK,KAAR,iB,GATCC,IAAMC,YCkCZC,G,sLAhCP,OACI,2BACC,yBAAKJ,UAAU,kBACzB,0BAAMA,UAAU,cACf,yBAAKA,UAAU,aACf,2BACC,2BAAOK,GAAG,WACV,2BAAOA,GAAG,WAAWC,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAK1D,2BACC,2BAAOH,GAAG,YAAaC,KAAK,OAAOC,KAAK,QAAQC,YAAY,WAI7D,2BACC,2BAAOH,GAAG,YACV,2BAAOA,GAAG,eAAeC,KAAK,WAAWC,KAAK,WAAWC,YAAY,cAGtE,4BAASF,KAAK,UAAd,iB,GAzBgBJ,IAAMC,YC6BXM,E,iLA1BP,OAEI,2BACA,yBAAKT,UAAU,kBAChB,0BAAMA,UAAU,cAEZ,2BACI,2BAAOK,GAAG,YAAaC,KAAK,OAAOC,KAAK,QAAQC,YAAY,WAIhE,2BACI,2BAAOH,GAAG,YACV,2BAAOA,GAAG,eAAeC,KAAK,WAAWC,KAAK,WAAWC,YAAY,cAGzE,4BAASF,KAAK,UAAd,iB,GAlBMJ,IAAMC,WCmCZO,G,uLAjCP,OAEI,2BAAOL,GAAG,OACpB,4BACE,sCACA,kCACA,wCACA,qCACA,qCAEF,4BACE,iCACA,iCACA,0CACA,6CACA,kDAEF,4BACE,iCACA,iCACA,yCACA,6CACA,oD,GAxBcH,IAAMC,YCUTQ,E,iLARP,OACI,6BACI,uBAAGN,GAAG,OAAN,uB,GAJEH,IAAMC,WCqBTS,MAff,WACE,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fabca295.chunk.js","sourcesContent":["import React from 'react';\r\n import './header.css'\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"header\">\r\n             <nav>\r\n                <ul>\r\n               \r\n                <li><a href=\"#\">Login</a></li>\r\n\t\t\t\t<li><a href=\"#\">Signup</a></li>\r\n                <li><a href=\"#\">Table</a></li>\r\n\t\t\t\t\t\r\n                </ul>\r\n                </nav>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './login.css'\r\nclass Login extends React.Component{\r\n\r\n    render(){\r\n        return (\r\n            <p>\r\n             <div className=\"form-container\">\r\n\t\t\t<form className=\"login-form\" >\r\n\t\t\t\t<div className=\"user-name\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label id=\"usrlbl\" ></label>\r\n\t\t\t\t\t<input id=\"username\" type=\"text\" name=\"name\" placeholder=\"name\"/>\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input id=\"useremail\"  type=\"text\" name=\"email\" placeholder=\"email\"/>\r\n\t\t\t\t\t\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<label id=\"pswdlbl\"></label>\r\n\t\t\t\t\t<input id=\"userpassword\" type=\"password\" name=\"password\" placeholder=\"password\"/>\r\n\t\t\t\t\t\r\n\t\t\t\t</p>\r\n\t\t\t\t<button  type=\"submit\">submit</button>\r\n\t\t\t\t\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t\t\r\n         </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './login.css'\r\n\r\nclass Signup extends React.Component{\r\n    render(){\r\n        return(\r\n\r\n            <p>\r\n            <div className=\"form-container\">\r\n           <form className=\"login-form\" >\r\n               \r\n               <p>\r\n                   <input id=\"useremail\"  type=\"text\" name=\"email\" placeholder=\"email\"/>\r\n                   \r\n               </p>\r\n               \r\n               <p>\r\n                   <label id=\"pswdlbl\"></label>\r\n                   <input id=\"userpassword\" type=\"password\" name=\"password\" placeholder=\"password\"/>\r\n                   \r\n               </p>\r\n               <button  type=\"submit\">Signup</button>\r\n               \r\n           </form>\r\n       </div>\r\n           \r\n        </p>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Signup;","import React from 'react';\r\nimport './table.css'\r\n\r\nclass Tbl extends React.Component{\r\n    render(){\r\n        return(\r\n\r\n            <table id=\"tbl\">\r\n  <tr>\r\n    <th>PostId</th>\r\n    <th>Id</th>\r\n    <th>PostName</th>\r\n    <th>Email</th>\r\n    <th>Body</th>\r\n  </tr>\r\n  <tr>\r\n    <td>1</td>\r\n    <td>1</td>\r\n    <td>about html</td>\r\n    <td>ysf@gmail.com</td>\r\n    <td>html is a markuap</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2</td>\r\n    <td>2</td>\r\n    <td>about css</td>\r\n    <td>yas@gmail.com</td>\r\n    <td>css is a style</td>\r\n  </tr>\r\n  \r\n  \r\n  \r\n \r\n</table>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Tbl;","import React from 'react';\r\n// import './pfn.css'\r\n\r\nclass Pnf extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p id=\"pnf\">page not found</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Pnf;","import React from 'react';\n\nimport './App.css';\nimport Header from './component/header';\nimport Login from './component/login'\nimport Signup from './component/signup';\nimport Tbl from './component/table';\nimport Pnf from './component/pnf';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Header></Header>\n        <Login></Login>\n        <Signup></Signup>\n        \n        <Tbl></Tbl>\n        <Pnf></Pnf>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}